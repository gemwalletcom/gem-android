/**
 * Generated by typeshare 1.13.2
 */

package com.wallet.core.primitives

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName

@Serializable
enum class FreezeType(val string: String) {
	@SerialName("Freeze")
	Freeze("Freeze"),
	@SerialName("Unfreeze")
	Unfreeze("Unfreeze"),
}

@Serializable
enum class Resource(val string: String) {
	@SerialName("bandwidth")
	Bandwidth("bandwidth"),
	@SerialName("energy")
	Energy("energy"),
}

@Serializable
data class FreezeData (
	val freezeType: FreezeType,
	val resource: Resource
)

@Serializable
data class RedelegateData (
	val delegation: Delegation,
	val toValidator: DelegationValidator
)

@Serializable
data class StakeData (
	val data: String? = null,
	val to: String? = null,
)

@Serializable
sealed class StakeType {
	@Serializable
	@SerialName("Stake")
	data class Stake(val content: DelegationValidator): StakeType()
	@Serializable
	@SerialName("Unstake")
	data class Unstake(val content: Delegation): StakeType()
	@Serializable
	@SerialName("Redelegate")
	data class Redelegate(val content: RedelegateData): StakeType()
	@Serializable
	@SerialName("Rewards")
	data class Rewards(val content: List<DelegationValidator>): StakeType()
	@Serializable
	@SerialName("Withdraw")
	data class Withdraw(val content: Delegation): StakeType()
	@Serializable
	@SerialName("Freeze")
	data class Freeze(val content: FreezeData): StakeType()
}

